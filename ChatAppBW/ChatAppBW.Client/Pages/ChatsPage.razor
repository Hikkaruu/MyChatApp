@page "/chat-menu"
@using ChatAppBW.Client.AppStates
@using ChatAppBW.Client.ChatServices
@using ChatModels
@using ChatModels.Dto
@using ChatModels.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveWebAssembly
@inject NavigationManager navigationManager
@inject MyHubConnectionService myHubConnectionService
@inject AvailableUserState state
<PageTitle>Chat</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <h2 class="text-center">Select the username to start chatting.</h2>
        <br />
        <div class="col-lg-6">
            <div class="card">
                <br>
                <div class="card-header bg-success text-white text-center">
                    Available Users
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        <AuthorizeView>
                            @if (AvailableUsers != null && AvailableUsers.Count > 0)
                            {
                                @foreach (var user in AvailableUsers)
                                {
                                    var current = user;
                                    var userId = context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                                    if (current.UserId != userId)
                                    {
                                        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                            <button class="btn btn-link text-success" @onclick="() => ChatUser(current)">
                                                @current.Fullname
                                            </button>
                                        </li>
                                    }
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted">No users available</li>
                            }
                        </AuthorizeView>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-12 text-center">
            @if (!myHubConnectionService.IsConnected)
            {
                <div class="alert alert-danger">
                    <strong>Disconnected</strong>: Connection to chat server lost.
                </div>
            }
            else
            {
                <div class="alert alert-success">
                    <strong>Connected</strong>: You are now connected to the chat server.
                </div>
            }
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa; 
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .list-group-item {
        border-color: #dee2e6; 
    }

    .btn-link {
        text-decoration: none;
    }

    .badge {
        font-size: 0.8rem;
        padding: 0.3em 0.6em;
    }

    .alert {
        border-radius: 10px;
    }
</style>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public List<AvailableUsersDto> AvailableUsers { get; set; } = [];
    private HubConnection? _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = myHubConnectionService.GetHubConnection();
      
        _hubConnection.On<List<AvailableUsersDto>>("NotifyAllClients", (ausers) =>
        {
            AvailableUsers = ausers;
            InvokeAsync(() => StateHasChanged());
        });

        await GetCurrentAuthentication();
        var httpClient = new HttpClient();
    }

    async Task GetCurrentAuthentication()
    {
        var user = (await AuthenticationState).User;
        await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUsers()
            {
                UserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value
            });
    }

    private void ChatUser(AvailableUsersDto availableUsersDto)
    {
        state.SetStates(availableUsersDto.Fullname!, availableUsersDto.UserId!);
        navigationManager.NavigateTo("/individual-chat");
    }
}
